---
name: "wrt-azops-init"

# 
# Training AzOps
# 
# Parameters
# Required parameters to install AzOps in the correct way.
# Required parameters are:
# - sc: Name of the service connection
# 
# Optional parameters are:
# - pull: Default naming is Wortell Cloud AzOps - Pull, enter a diff value if required.
# - push: Default naming is Wortell Cloud AzOps - Push, enter a diff value if required.
# - validate: Default naming is Wortell Cloud AzOps - Validate, enter a diff value if required.
# - update: Default naming is Wortell Cloud AzOps - Update, enter a diff value if required.
#

parameters:
- name: organization
  displayName: Name of the Azure DevOps organization we are going to install AzOps in
  type: string
- name: project
  displayName: Name of the Azure DevOps project we are going to install AzOps in
  type: string
- name: reponame
  displayName: This is the Azure Repo name where the code is being deployed to
  type: string
- name: agentgroupname
  displayName: This is the Azure DevOps Pool of Agents used to build the code
  default: Azure Pipelines
  type: string
- name: pipelinepath
  displayName: This is the Azure Pipelines path where to install AzOps in
  default: Wortell Cloud Operations
  type: string
- name: armclientid
  displayName: Azure AD App Registration Client ID used for AzOps
  type: string
- name: armclientsecret
  displayName: Azure AD App Registration Client Secret used for AzOps
  type: secret
- name: armsubscriptionid
  displayName: Azure Management Subscription ID used for AzOps
  type: string
- name: armtenantid
  displayName: Azure Tenant ID used for AzOps
  type: string
- name: vargroupname
  displayName: Naming for Library Variable Group
  default: wrt-cloud-azops-credentials
  type: string
- name: pullname
  displayName: Naming for Pull pipeline
  default: wrt-cloud-azops-pull
  type: string
- name: pushname
  displayName: Naming for Push pipeline
  default: wrt-cloud-azops-push
  type: string
- name: validatename
  displayName: Naming for Validate pipeline
  default: wrt-cloud-azops-validate
  type: string
- name: updatename
  displayName: Naming for Update pipeline
  default: wrt-cloud-azops-update
  type: string
- name: approval
  displayName: Fill in the e-mail address to approve the installation
  type: string
- name: approvaluri
  displayName: Paste the URI of the manual so you can complete the installation
  type: string

# 
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Repos. It's also recommended to manually
# disable CI triggers with overrides.
#

trigger: none

jobs:

  - job: init

    #
    # Init
    #

    displayName: "Init Repo and Variable Group"
    pool:
      vmImage: "ubuntu-20.04"

    steps:

      #
      # Checkout
      # Set checkout self
      #

      - checkout: self
        persistCredentials: true

      #
      # Configure
      # Set global options
      #

      - task: Bash@3
        displayName: "Configure"
        inputs:
          targetType: "inline"
          script: |
            git config user.name "Wortell Cloud AzOps"
            git config user.email "wortellcloudazops@wortell.nl"
            
      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Create Desired State Repository'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsRepository.ps1'
          arguments: >
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -projectid "$(System.TeamProjectId)"
            -armtenantid "${{ parameters.armtenantid }}"
            -armclientid "${{ parameters.armclientid }}"
            -armclientsecret "${{ parameters.armclientsecret }}"
            -armsubscriptionid "${{ parameters.armsubscriptionid }}"
            -vargroupname "${{ parameters.vargroupname }}"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"

      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Create Variable Group'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsVariableGroup.ps1'
          arguments: >
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -armtenantid "${{ parameters.armtenantid }}"
            -armclientid "${{ parameters.armclientid }}"
            -armclientsecret "${{ parameters.armclientsecret }}"
            -armsubscriptionid "${{ parameters.armsubscriptionid }}"
            -vargroupname "${{ parameters.vargroupname }}"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"

  - job: pipelines
  
    #
    # Init
    #

    displayName: "AzOps Pipelines"
    pool:
      vmImage: "ubuntu-20.04"

    variables: 
      repoId: $[ dependencies.init.outputs['setVariable.repoId'] ]
      repoDesiredStateName: $[ dependencies.init.outputs['setVariable.repoDesiredStateName'] ]
    
    steps:

      #
      # Checkout
      # Set checkout variable $(repoDesiredStateName)
      #

      - checkout: $(repoDesiredStateName)
        persistCredentials: true

      #
      # Configure
      # Set global options
      #

      - task: Bash@3
        displayName: "Configure"
        inputs:
          targetType: "inline"
          script: |
            git config user.name "Wortell Cloud AzOps"
            git config user.email "wortellcloudazops@wortell.nl"
            
      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Create Pull Pipeline'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsPullPipeline.ps1'
          arguments: >
            -AgentDirectory "$(Agent.BuildDirectory)"
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -agentgroupname "${{ parameters.agentgroupname }}"
            -reponame "${{ parameters.reponame }}"
            -repoDesiredStateName "$(repoDesiredStateName)"
            -repoid "$(repositoryId)"
            -pipelinepath "${{ parameters.pipelinepath }}"
            -pullname "${{ parameters.pullname }}"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"

      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Create Push Pipeline'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsPushPipeline.ps1'
          arguments: >
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -agentgroupname "${{ parameters.agentgroupname }}"
            -reponame "${{ parameters.reponame }}"
            -repoDesiredStateName "$(repoDesiredStateName)"
            -repoid "$(repositoryId)"
            -pipelinepath "${{ parameters.pipelinepath }}"
            -pushname "${{ parameters.pushname }}"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"
            
      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Create Update Pipeline'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsUpdatePipeline.ps1'
          arguments: >
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -agentgroupname "${{ parameters.agentgroupname }}"
            -reponame "${{ parameters.reponame }}"
            -repoDesiredStateName "$(repoDesiredStateName)"
            -repoid "$(repositoryId)"
            -pipelinepath "${{ parameters.pipelinepath }}"
            -updatename "${{ parameters.updatename }}"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"
            
      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Create Validate Pipeline'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsValidatePipeline.ps1'
          arguments: >
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -agentgroupname "${{ parameters.agentgroupname }}"
            -reponame "${{ parameters.reponame }}"
            -repoDesiredStateName "$(repoDesiredStateName)"
            -repoid "$(repositoryId)"
            -pipelinepath "${{ parameters.pipelinepath }}"
            -validatename "${{ parameters.validatename }}"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"
            
      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: 'Wait for Approval'
        inputs:
          targetType: 'filePath'
          filePath: '.powershell/.azdevops/New-AzOpsWaitforApproval.ps1'
          arguments: >
            -approvaluri "${{ parameters.approvaluri }}"
            -approver "${{ parameters.approver }}"
            -organization "${{ parameters.organization }}"
            -project "${{ parameters.project }}"
            -definitionid "$(System.DefinitionId)"
            -buildid "$(Build.BuildId)"
            -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"